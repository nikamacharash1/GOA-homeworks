//სტატიკურ და დინამიურ მასივებს კომპიუტერულ პროგრამირებაში მეტად მნიშვნელოვანი ადგილი უჭირავს
//მათი ცოდნა აუცილებელია ეფექტური კოდის წერისთვის.
// სტატიკური მასივები არის მონაცემთა სტრუქტურები, რომლებსაც აქვთ მუდმივი ზომა, რაც ნიშნავს, რომ მათი რაოდენობა გამოყოფის
// დროს უნდა იყოს განსაზღვრული. სტატიკური მასივები იცავენ და ინახავენ ერთნაირი ტიპის ელემენტებს (მაგალითად, მთელი რიცხვები,
// სიმბოლოები და ა.შ.) ერთდროულად, რაც უზრუნველყოფს სწრაფ წვდომას თითოეულ ელემენტზე მათი ინდექსების საშუალებით.
// თითოეულ ელემენტზე წვდომა ხდება მისი ინდექსის საშუალებით, რაც საშუალებას იძლევა სწრაფი ოპერაციების შესრულება.
// პროგრამის შექმნის დროს, საჭიროა განისაზღვროს მასივის ზომა, რის შემდეგაც მეხსიერება მუდმივად გამოყოფილი იქნება მისთვის.
// მასივის ზომა ვერ იცვლება მისი შექმნის შემდეგ.
// მისი უპირატესობებია 
// 1)სტატიკური მასივების წვდომა და მართვა სწრაფია, რადგან ისინი პირდაპირ მეხსიერების მუდმივ ადგილას ინახება.
// 2)თუ არ უნდა გამოიყენოთ მთელი მასივი, მასივის დაუგეგმავი ელემენტები მაინც დაკავებენ ადგილს მეხსიერებაში.


//დინამიური მასივები არის მონაცემთა სტრუქტურები, რომლებსაც აქვთ ზომის ცვალებადობა, რაც ნიშნავს, რომ მათი ზომა 
// runtime-ის დროს შეიძლება შეიცვალოს. ეს ნიშნავს, რომ შეგიძლიათ დამატებით ელემენტების დამატება ან მათი მოცილება საჭიროების მიხედვით.
// დინამიური მასივები მეხსიერების დინამიურად გამოყოფილი ნაწილი იყენებენ, რაც ნიშნავს, რომ ისინი შეძლებენ გაიზარდონ ან შემცირდნენ
//  მონაცემთა რაოდენობა შეგიძლიათ შეცვალოთ, რაც იძლევა უფრო დიდ მოქნილობას.
// როცა საჭირო არ არის, შეგიძლიათ გახადოთ მეხსიერება თავისუფალი.
// შეგიძლიათ ნებისმიერი რაოდენობის ელემენტების შესანახად, რაც განსაკუთრებით სასარგებლოა, როცა არ იცით, რამდენი ელემენტი იქნება საჭირო.
// მხოლოდ იმ რაოდენობის მეხსიერებას იყენებთ, რაც გჭირდებათ.
// საჭიროა მეხსიერების მართვის და გამართვის ცოდნა, რადგან შეიძლება მოხდეს მეხსიერების გაჟონვა, თუ შეწყვეტილი არაა გამოყოფილი მეხსიერება.
// დინამიური მეხსიერების მართვა, როგორც წესი, უფრო ნელი პროცესია, ვიდრე სტატიკური მასივების.
// 